syntax = "proto3";

package daprd.proto.runtime.v1;

import "google/protobuf/empty.proto";
import "daprd/proto/common/v1/common.proto";

option csharp_namespace = "Daprd.AppCallback.Autogen.Grpc.v1";
option java_outer_classname = "DaprdAppCallbackProtos";
option java_package = "io.daprd.v1";
option go_package = "github.com/malijoe/daprdan/pkg/proto/runtime/v1;runtime";

// AppCallback V1 allows user application to interact with Daprd runtime.
// User application needs to implement AppCallback service if it needs to
// receive messages form daprd runtime.
service AppCallback {
    // Invokes service method with InvokeRequest
    rpc OnInvoke (common.v1.InvokeRequest) returns (common.v1.InvokeResponse) {}

    // Lists all topics subscribed by this app.
    rpc ListTopicSubscriptions(google.protobuf.Empty) returns (TopicEventResponse) {}

    // Subscribes events from Pubsub
    rpc OnTopicEvent(TopicEventRequest) returns (TopicEventResponse) {}

    // Lists all input bindings subscribed by this app.
    rpc ListInputBindings(google.protobuf.Empty) returns (ListInputBindingsResponse) {}

    // Listens to events from the input bindings
    // 
    // User application can save the states or send the events to the output
    // bindings optionally by returning BindingEventResponse.
    rpc OnBindingEvent(BindingEventRequest) returns (BindingEventResponse) {}
}

// AppCallbackHealthCheck V1 is an optional extension to AppCallback V1 to implement
// the HealthCheck method.
service AppCallbackHealthCheck {
    // Health check. 
    rpc HealthCheck(google.protobuf.Empty) returns (HealthCheckResponse) {}
}

// TopicEventRequest message is compatible with CloudEvent spec v1.0
// https://github.com/cloudevents/spec/blob/v1.0/spec.md
message TopicEventRequest {
    // id identifies the event. Producers MUST ensure that source + id
    // is unique for each distinct event. If a duplicate event is re-sent
    // (e.g. due to a network error) it MAY have the same id.
    string id = 1;

    // source identifies the context in which an event happened.
    // Often this will include information such as the type of the 
    // event source, the organization publishing the event or the process 
    // that produced the event. The exact syntax and semantics behind 
    // the data encoded in the URI is defined by the event producer.
    string source = 2;

    // The type of event related to the originating occurence.
    string type = 3;

    // The version of the CloudEvents specification.
    string spec_version = 4;

    // The content type of data value.
    string data_content_type = 5;

    // The pubsub topic which the publisher sent to.
    string topic = 6;

    // The content of the event.
    bytes data = 7;

    // The name of the pubsub the publisher sent to.
    string pubsub_name = 8;

    // The matching path from TopicSubscription/routes (if specified) for this event. 
    // This value is used by OnTopicEvent to "switch" inside the handler. 
    string path = 9;
}

// TopicEventResponse is the response from the app on published message
message TopicEventResponse {
    // TopicEventResponseStatus allows apps to have finer control over handling the message. 
    enum TopicEventResponseStatus {
        // SUCCESS is the default behaviour: message is acknowledged and not retried or logged.
        SUCCESS = 0;
        // RETRY status signals Daprd to retry the message as part of an expected scenario (no warning is logged).
        RETRY = 1;
        // DROP status signals Daprd to drop the message as part of an unexpected scenario (warning is logged).
        DROP = 2;
    }

    // The list of output bindings.
    TopicEventResponseStatus status = 1;
}

// BindingEventRequest represents input bindings event.
message BindingEventRequest {
    // Required. The name of the input binding component.
    string name = 1;

    // Required. The payload that the input bindings sent
    bytes data = 2;

    // The metadata set by the input binding components. 
    map<string,string> metadata = 3;
}

// BindingEventResponse includes operations to save state or
// send data to output bindings optionally.
message BindingEventResponse {
    // The name of state store where states are saved.
    string store_name = 1;

    // The state key values which will be stored in store_name.
    repeated common.v1.StateItem states = 2;

    // BindingEventConcurrency is the kind of concurrency
    enum BindingEventConcurrency {
        // SEQUENTIAL sends data to output bindings specified in "to" sequentially.
        SEQUENTIAL = 0;
        // PARALLEL sends data to output bindings specified in "to" in parallel. 
        PARALLEL = 1;
    }

    // The list of output bindings. 
    repeated string to = 3;

    // The content which will be sent to "to" output bindings.
    bytes data = 4;

    // The concurrency of output bindings to send data to 
    // "to" output bindings list. The default is SEQUENTIAL. 
    BindingEventConcurrency concurrency = 5;
}

// ListTopicSubscrtiptionsResponse is the message including the list of subscribing topics.
message ListTopicSubscrtiptionsResponse {
    // The list of topics. 
    repeated TopicSubscription subscriptions = 1;
}

// TopicSubscription represents topic and metadata. 
message TopicSubscription {
    // Required. The name of the pubsub containing the topic below to subscribe to. 
    string pubsub_name = 1;

    // Required. The name of topic which will be subscribed
    string topic = 2;

    // The optional properties used for this topic's subscription e.g. session id
    map<string,string> metadata = 3;

    // The optional routing rules to match against. In the gRPC interface, OnTopicEvent
    // is still invoked but the matching path is sent in the TopicEventRequest. 
    TopicRoutes routes = 5;

    // The optional dead letter queue for this topic to send events to. 
    string dead_letter_topic = 6;
}

message TopicRoutes {
    // The list of rules for this topic. 
    repeated TopicRule rules = 1;

    // The default path for this topic. 
    string default = 2;
}

message TopicRule {
    // The optional CEL expression used to match the event. 
    // If the match is not specified, then the route is considered
    // the default.
    string match = 1;
    
    // The path used to identify matches for this subscription. 
    // This value is passed in TopicEventRequest and used by OnTopicEvent to "switch"
    // inside the handler. 
    string path = 2;
}

// ListInputBindingsResponse is the message including the list of input bindings. 
message ListInputBindingsResponse {
    // The list of input bindings. 
    repeated string bindings = 1;
}

// HealthCheckResponse is the response to the health check. 
// This message is currently empty and used as placeholder. 
message HealthCheckResponse {}